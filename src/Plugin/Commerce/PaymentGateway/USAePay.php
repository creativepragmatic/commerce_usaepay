<?php

namespace Drupal\commerce_usaepay\Plugin\Commerce\PaymentGateway;

use Drupal\Component\Datetime\TimeInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\commerce_payment\CreditCard;
use Drupal\commerce_payment\Entity\PaymentInterface;
use Drupal\commerce_payment\Entity\PaymentMethodInterface;
use Drupal\commerce_payment\Exception\PaymentGatewayException;
use Drupal\commerce_payment\PaymentMethodTypeManager;
use Drupal\commerce_payment\PaymentTypeManager;
use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\OnsitePaymentGatewayBase;
use Drupal\commerce_price\Price;
use Symfony\Component\DependencyInjection\ContainerInterface;
use \SoapClient;
use \SoapFault;

/**
 * Provides the USAePay payment gateway.
 *
 * @CommercePaymentGateway(
 *   id = "usaepay",
 *   label = "USAePay",
 *   display_label = "USAePay",
 *   payment_method_types = {"credit_card"},
 *   credit_card_types = {
 *     "amex", "dinersclub", "discover", "jcb", "mastercard", "visa",
 *   },
 * )
 */
class USAePay extends OnsitePaymentGatewayBase implements USAePayInterface {

  /**
   * The PHP SOAP client.
   *
   * @var \SoapClient
   */
  protected $soapClient;

  /**
   * {@inheritdoc}
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, PaymentTypeManager $payment_type_manager, PaymentMethodTypeManager $payment_method_type_manager, TimeInterface $time) {
    parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager, $payment_type_manager, $payment_method_type_manager, $time);

    if (!empty($this->configuration['wsdl_key'])) {
      if ($this->getMode() === 'test') {
        $wsdl = 'https://sandbox.usaepay.com/soap/gate/' . $this->configuration['wsdl_key'] . '/usaepay.wsdl';
      } else {
        $wsdl = 'https://usaepay.com/soap/gate/' . $this->configuration['wsdl_key'] . '/usaepay.wsdl';
      }

      $this->soapClient = new SoapClient($wsdl);
    }
  }

  /**
   * {@inheritdoc}
   */
  public function defaultConfiguration() {
    return [
      'wsdl_key' => '',
      'source_key' => '',
      'pin' => '',
    ] + parent::defaultConfiguration();
  }

  /**
   * {@inheritdoc}
   */
  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
    $form = parent::buildConfigurationForm($form, $form_state);

    $form['wsdl_key'] = [
      '#type' => 'textfield',
      '#title' => $this->t('WSDL Key'),
      '#default_value' => $this->configuration['wsdl_key'],
      '#description' => $this->t('WSDL API endpoint key generated from \'https://sandbox.usaepay.com/_developer/app/login\'.  Ex: https://www.usaepay.com/soap/gate/<strong>ABCD1234</strong>/usaepay.wsdl.'),
      '#required' => TRUE,
    ];

    $form['source_key'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Source Key'),
      '#default_value' => $this->configuration['source_key'],
      '#description' => $this->t('Source key for the merchant account generated by the Merchant Console at www.usaepay.com.'),
      '#required' => TRUE,
    ];

    $form['pin'] = [
      '#type' => 'textfield',
      '#title' => $this->t('PIN for Source Key'),
      '#default_value' => $this->configuration['pin'],
      '#description' => $this->t('While USAePay makes PIN numbers optional it is recommended that you always use a PIN and since the \'sale\' method of the USAePay SOAP API requires it, it is a mandatory field for this module.'),
      '#required' => TRUE,
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
    parent::validateConfigurationForm($form, $form_state);

  }

  /**
   * {@inheritdoc}
   */
  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    parent::submitConfigurationForm($form, $form_state);

    if (!$form_state->getErrors()) {
      $values = $form_state->getValue($form['#parents']);
      $this->configuration['wsdl_key'] = $values['wsdl_key'];
      $this->configuration['source_key'] = $values['source_key'];
      $this->configuration['pin'] = $values['pin'];
    }
  }

  /**
   * {@inheritdoc}
   */
  public function createPayment(PaymentInterface $payment, $capture = TRUE) {

    $this->assertPaymentState($payment, ['new']);
    $payment_method = $payment->getPaymentMethod();
    $this->assertPaymentMethod($payment_method);

    $order = $payment->getOrder();
    $amount = $payment->getAmount();
    $address = $payment_method->getBillingProfile()->get('address')->first();

    try {
      $transaction_details = [
        'AccountHolder' => $address->getGivenName() . ' ' . $address->getFamilyName(),
        'Details' => [
          'Invoice' => $order->getOrderNumber(),
          'OrderID' => $order->id(),
          'Description' => 'Purchase from website',
          'Amount' => $amount->getNumber(),
          'Currency' => $amount->getCurrencyCode(),
        ],
        'CreditCardData' => [
'CardNumber' => $_SESSION['card_data']['number'],
'CardExpiration' => $_SESSION['card_data']['expiration'],
'CardCode' => $_SESSION['card_data']['code'],
          'AvsStreet' => $address->getAddressLine1(),
          'AvsZip' => $address->getPostalCode(),
        ],
        'ClientIP' => $order->getIpAddress(),
        'CustomerID' => $order->getCustomerId(),
        'BillingAddress' => [
          'FirstName' => $address->getGivenName(),
          'LastName' => $address->getFamilyName(),
          'Company' => $address->getOrganization(),
          'Street' => $address->getAddressLine1(),
          'Street2' => $address->getAddressLine2(),
          'City' => $address->getLocality(),
          'State' => $address->getAdministrativeArea(),
          'Zip' => $address->getPostalCode(),
          'Country' => $address->getCountryCode(),
          'Email' => $order->getEmail(),
        ]
      ];

      $response = $this->soapClient->runSale($this->buildToken(), $transaction_details);
    }
    catch (SoapFault $e) {
      throw new PaymentGatewayException($e->getMessage());
    }

    $next_state = $capture ? 'completed' : 'authorization';
    $payment->setState($next_state);
    $payment->setRemoteId($response->RefNum);
    $payment->save();
  }

  /**
   * {@inheritdoc}
   */
  public function capturePayment(PaymentInterface $payment, Price $amount = NULL) {

    $this->assertPaymentState($payment, ['authorization']);
    $amount = $amount ?: $payment->getAmount();

    try {
      $ref_num = $payment->getRemoteId();
      $number = $amount->getNumber();

      // TODO: Add configuration variable so site owner can decide what will
      // happen if the authorization has expired.  Possible options are 'Error',
      // 'ReAuth' and 'Capture'.
      $response = $this->soapClient->captureTransaction($this->buildToken(), $ref_num, $number, 'ReAuth');
    }
    catch (SoapFault $e) {
      throw new PaymentGatewayException($e->getMessage());
    }

    $payment->setState('completed');
    $payment->setAmount($amount);
    $payment->save();
  }

  /**
   * {@inheritdoc}
   */
  public function voidPayment(PaymentInterface $payment) {

    $this->assertPaymentState($payment, ['authorization']);

    try {
      $ref_num = $payment->getRemoteId();
      $response = $this->soapClient->voidTransaction($this->buildToken(), $ref_num);
    }
    catch (SoapFault $e) {
      throw new PaymentGatewayException($e->getMessage());
    }

    $payment->setState('authorization_voided');
    $payment->save();
  }

  /**
   * {@inheritdoc}
   */
  public function refundPayment(PaymentInterface $payment, Price $amount = NULL) {

    $this->assertPaymentState($payment, ['completed', 'partially_refunded']);
    $amount = $amount ?: $payment->getAmount();
    $this->assertRefundAmount($payment, $amount);

    try {
      $ref_num = $payment->getRemoteId();
      $number = $amount->getNumber();
      $response = $this->soapClient->refundTransaction($this->buildToken(), $ref_num, $number);
    }
    catch (SoapFault $e) {
      throw new PaymentGatewayException($e->getMessage());
    }

    $old_refunded_amount = $payment->getRefundedAmount();
    $new_refunded_amount = $old_refunded_amount->add($amount);
    if ($new_refunded_amount->lessThan($payment->getAmount())) {
      $payment->setState('partially_refunded');
    }
    else {
      $payment->setState('refunded');
    }

    $payment->setRefundedAmount($new_refunded_amount);
    $payment->save();
  }

  /**
   * {@inheritdoc}
   */
  public function createPaymentMethod(PaymentMethodInterface $payment_method, array $payment_details) {

    $remote_payment_method = $this->doCreatePaymentMethod($payment_method, $payment_details);

    $payment_method->card_type = $remote_payment_method['card_type'];
    $payment_method->card_number = $remote_payment_method['last4'];
    $payment_method->card_exp_month = $remote_payment_method['expiration_month'];
    $payment_method->card_exp_year = $remote_payment_method['expiration_year'];
    $payment_method->setRemoteId($remote_payment_method['customer_number']);
    $expires = CreditCard::calculateExpirationTimestamp($remote_payment_method['expiration_month'], $remote_payment_method['expiration_year']);
    $payment_method->setExpiresTime($expires);

    $payment_method->save();
  }

  /**
   * {@inheritdoc}
   */
  public function deletePaymentMethod(PaymentMethodInterface $payment_method) {

    // Delete the remote record.
    $owner = $payment_method->getOwner();
    $cust_num = $this->getRemoteCustomerId($owner);

    try {
      $methods = $this->soapClient->getCustomerPaymentMethods($this->buildToken(), $cust_num);
      foreach($methods as $method) {
        $this->soapClient->deleteCustomerPaymentMethod($this->buildToken(), $cust_num, $method->MethodID);
      }
    } 
    catch(SoapFault $e) {
      throw new PaymentGatewayException($e->getMessage());
    }

    // Delete the local entity.
    $payment_method->delete();
  }

  /**
   * Adds customer payment method to USAePay gateway.
   *
   * @param \Drupal\commerce_payment\Entity\PaymentMethodInterface $payment_method
   *   The payment method.
   * @param array $payment_details
   *   The gateway-specific payment details.
   *
   * @return array
   *   The payment method information returned by the gateway. Notable keys:
   *     - customer_number: USAePay customer number.
   *     - card_type: The card type.
   *     - last4: The last 4 digits of the credit card number.
   *     - expiration_month: The expiration month.
   *     - expiration_year: The expiration year.
   */
  private function doCreatePaymentMethod(PaymentMethodInterface $payment_method, array $payment_details) {

    $card_type = CreditCard::detectType($payment_details['number'])->getId();
    $owner = $payment_method->getOwner();
    $address = $payment_method->getBillingProfile()->get('address')->first();
    $cust_num = NULL;
    if ($owner && $owner->isAuthenticated()) {
      $cust_num = $this->getRemoteCustomerId($owner);
	}

    $arr_billing_address = [
      'FirstName' => $address->getGivenName(),
      'LastName' => $address->getFamilyName(),
      'Company' => $address->getOrganization(),
      'Street' => $address->getAddressLine1(),
      'Street2' => $address->getAddressLine2(),
      'City' => $address->getLocality(),
      'State' => $address->getAdministrativeArea(),
      'Zip' => $address->getPostalCode(),
      'Country' => $address->getCountryCode(),
      'Email' => $owner->getEmail()
    ];

    $arr_payment_method = [
      'MethodName' => '',
      'SecondarySort' => 1,
      'CardNumber' => $payment_details['number'],
      'CardExpiration' => $payment_details['expiration']['year'] . '-' . $payment_details['expiration']['month'],
      'CardCode' => $payment_details['security_code'],
    ];

    if ($cust_num) {
      try {
        $customer_object = $this->soapClient->getCustomer($this->buildToken(), $cust_num);
        $customer_object->BillingAddress = $arr_billing_address;
        $this->soapClient->updateCustomer($this->buildToken(), $cust_num, $customer_object);

        $method_stored = false;
        foreach ($customer_object->PaymentMethods as $method) {
	      if (substr($method->CardNumber, -4) === substr($arr_payment_method['CardNumber'], -4)
              && $method->CardExpiration === $arr_payment_method['CardExpiration']) {
            $method_stored = true;
            break;
          }
        }

        if (!$method_stored) {
          $this->soapClient->addCustomerPaymentMethod($this->buildToken(),
            $cust_num, $arr_payment_method, true, false);
        }
      } 
      catch(SoapFault $e) {
        throw new PaymentGatewayException($e->getMessage());
      }
    }
    else {
      try {
        $customer_object = [
          'CustomerID' => $owner->id(),
          'OrderID' => rand(),
          'BillingAddress' => $arr_billing_address,
          'PaymentMethods' => [$arr_payment_method],
          'Enabled' => false,
          'Schedule' => '',
          'NumLeft' => '',
          'Next' => '',
          'Amount' => '',
          'Description' => '',
          'SendReceipt' => false,
          'ReceiptNote' => '',
        ];

        $cust_num = $this->soapClient->addCustomer($this->buildToken(), $customer_object);
      } 
      catch(SoapFault $e) {
        throw new PaymentGatewayException($e->getMessage());
      }

      if ($owner && $owner->isAuthenticated()) {
        $this->setRemoteCustomerId($owner, $cust_num);
        $owner->save();
      }
    }

$_SESSION['card_data'] = [
  'number' => $payment_details['number'],
  'expiration' => $payment_details['expiration']['month'] . substr($payment_details['expiration']['year'], -2),
  'code' => $payment_details['security_code'],
];

    return [
      'customer_number' => $cust_num,
      'card_type' => $card_type,
      'last4' => substr($payment_details['number'], -4),
      'expiration_month' => $payment_details['expiration']['month'],
      'expiration_year' => $payment_details['expiration']['year'],
    ];
  }

  /**
   * Builds ueSecurityToken object required to securely identify the merchant
   * to the gateway.
   */
  private function buildToken() {

    // generate random seed value
    $seed = microtime(true) . rand();

    // assemble prehash data
    $prehash = $this->configuration['source_key'] . $seed . trim($this->configuration['pin']);

    // hash the data
    $hash = sha1($prehash);

    // assemble ueSecurityToken as an array
    $token = [
      'SourceKey' => $this->configuration['source_key'],
      'PinHash' => [
        'Type' => 'sha1',
        'Seed' => $seed,
        'HashValue' => $hash
      ],
      'ClientIP' => $_SERVER['REMOTE_ADDR'],
    ];

    return $token;
  }
}
